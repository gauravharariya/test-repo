"""Initial migration.

Revision ID: 51d187719e71
Revises:
Create Date: 2023-03-03 00:07:37.930538

"""
import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from sqlalchemy import Sequence
from sqlalchemy.sql.ddl import CreateSequence, DropSequence

from app.constants import CONFIGURATION_SCHEMA

# revision identifiers, used by Alembic.
revision = "51d187719e71"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "client",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema=CONFIGURATION_SCHEMA,
    )
    op.create_table(
        "dataingest",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("source_name", sa.String(length=256), nullable=False),
        sa.Column("auto_ingest", sa.Boolean(), nullable=True),
        sa.Column("aws_sns_topic", sa.String(length=256), nullable=True),
        sa.Column("comment", sa.Text(), nullable=True),
        sa.Column("error_integration", sa.Text(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema=CONFIGURATION_SCHEMA,
    )
    op.create_table(
        "dataprovider",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("type", sa.String(length=256), nullable=True),
        sa.Column("contact_name", sa.String(length=256), nullable=True),
        sa.Column("contact_email", sa.String(length=256), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema=CONFIGURATION_SCHEMA,
    )
    op.create_table(
        "domain",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("database", sa.String(length=256), nullable=False),
        sa.Column("db_schema", sa.String(length=256), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        schema=CONFIGURATION_SCHEMA,
    )
    op.create_table(
        "fileformat",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column(
            "format_type",
            sa.Enum(
                "CSV", "JSON", "AVRO", "ORC", "PARQUET", "XML", name="fileformattype"
            ),
            nullable=False,
        ),
        sa.Column(
            "compression",
            sa.Enum(
                "AUTO",
                "GZIP",
                "BZ2",
                "BROTLI",
                "ZSTD",
                "DEFLATE",
                "RAW_DEFLATE",
                "NONE",
                name="compressionalgorithm",
            ),
            nullable=True,
        ),
        sa.Column("column_separator", sa.String(length=32), nullable=True),
        sa.Column("row_separator", sa.String(length=32), nullable=True),
        sa.Column("null_string", sa.String(length=32), nullable=False),
        sa.Column("is_trimmed", sa.Boolean(), nullable=True),
        sa.Column("skip_header_lines", sa.Integer(), nullable=True),
        sa.Column("is_column_mismatch_error_raised", sa.Boolean(), nullable=True),
        sa.Column("escape_character", sa.String(length=128), nullable=True),
        sa.Column("escape_unenclosed_field", sa.String(length=128), nullable=True),
        sa.Column("date_format", sa.String(length=256), nullable=False),
        sa.Column("timestamp_format", sa.String(length=256), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("is_global", sa.Boolean(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema=CONFIGURATION_SCHEMA,
    )
    op.create_table(
        "function",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("name", sa.String(length=1024), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("code", sa.Text(), nullable=False),
        sa.Column("code_language", sa.Enum("SQL", name="codelanguage"), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema=CONFIGURATION_SCHEMA,
    )
    op.create_table(
        "schema",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "type", sa.Enum("ASSET", "INSTANCE", name="schematype"), nullable=False
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema=CONFIGURATION_SCHEMA,
    )
    op.create_table(
        "sftpsource",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("host", sa.String(length=256), nullable=False),
        sa.Column("port", sa.Integer(), nullable=False),
        sa.Column("user", sa.String(length=256), nullable=False),
        sa.Column("passphrase", sa.String(length=256), nullable=False),
        sa.Column("source_path", sa.String(length=256), nullable=False),
        sa.Column("backup_dir", sa.String(length=256), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema=CONFIGURATION_SCHEMA,
    )
    op.create_table(
        "dataasset",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("domain_id", sa.Integer(), nullable=False),
        sa.Column("schema_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("s3_bucket", sa.String(length=256), nullable=False),
        sa.Column("file_path", sa.String(length=1025), nullable=False),
        sa.Column("instance_default_database", sa.String(length=256), nullable=False),
        sa.Column("instance_default_db_schema", sa.String(length=256), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["domain_id"],
            ["domain.id"],
        ),
        sa.ForeignKeyConstraint(
            ["schema_id"],
            ["schema.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=CONFIGURATION_SCHEMA,
    )
    op.create_table(
        "functionargument",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("function_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("default_value", sa.String(length=256), nullable=True),
        sa.Column("data_type", sa.String(length=256), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["function_id"],
            ["function.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=CONFIGURATION_SCHEMA,
    )
    op.create_table(
        "schemacolumn",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("schema_id", sa.Integer(), nullable=False),
        sa.Column("column_number", sa.Integer(), nullable=True),
        sa.Column("column_name", sa.String(length=256), nullable=False),
        sa.Column(
            "tags", sqlalchemy_utils.types.scalar_list.ScalarListType(), nullable=True
        ),
        sa.Column("data_type", sa.String(length=256), nullable=False),
        sa.Column("is_custom_column", sa.Boolean(), nullable=True),
        sa.Column("is_nullable", sa.Boolean(), nullable=True),
        sa.Column("is_foreign_key", sa.Boolean(), nullable=True),
        sa.Column("is_primary_key", sa.Boolean(), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["schema_id"],
            ["schema.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=CONFIGURATION_SCHEMA,
    )
    op.create_table(
        "dataassetinstance",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("data_asset_id", sa.Integer(), nullable=False),
        sa.Column("file_format_id", sa.Integer(), nullable=False),
        sa.Column("schema_id", sa.Integer(), nullable=False),
        sa.Column("client_id", sa.Integer(), nullable=False),
        sa.Column("data_provider_id", sa.Integer(), nullable=False),
        sa.Column("data_ingest_id", sa.Integer(), nullable=True),
        sa.Column("source_type", sa.Unicode(length=255), nullable=False),
        sa.Column("source_id", sa.Integer(), nullable=True),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("database", sa.String(length=256), nullable=True),
        sa.Column("db_schema", sa.String(length=256), nullable=True),
        sa.Column("materialization_type", sa.String(length=256), nullable=False),
        sa.Column(
            "tags", sqlalchemy_utils.types.scalar_list.ScalarListType(), nullable=True
        ),
        sa.Column("stage_name", sa.String(length=256), nullable=True),
        sa.Column("start_time", sa.DateTime(timezone=True), nullable=True),
        sa.Column("expires", sa.DateTime(timezone=True), nullable=True),
        sa.Column("one_off", sa.Boolean(), nullable=True),
        sa.Column("enabled", sa.Boolean(), nullable=True),
        sa.Column(
            "schedule_type",
            sa.Enum("EVENT", "CRON", name="scheduletype"),
            nullable=False,
        ),
        sa.Column("schedule_cron", sa.String(length=256), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["client_id"],
            ["client.id"],
        ),
        sa.ForeignKeyConstraint(
            ["data_asset_id"],
            ["dataasset.id"],
        ),
        sa.ForeignKeyConstraint(
            ["data_ingest_id"],
            ["dataingest.id"],
        ),
        sa.ForeignKeyConstraint(
            ["data_provider_id"],
            ["dataprovider.id"],
        ),
        sa.ForeignKeyConstraint(
            ["file_format_id"],
            ["fileformat.id"],
        ),
        sa.ForeignKeyConstraint(
            ["schema_id"],
            ["schema.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=CONFIGURATION_SCHEMA,
    )
    op.create_table(
        "functionmapping",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("data_asset_instance_id", sa.Integer(), nullable=False),
        sa.Column("function_id", sa.Integer(), nullable=False),
        sa.Column(
            "argument_value", sqlalchemy_utils.types.json.JSONType(), nullable=True
        ),
        sa.Column("alias_name", sa.String(length=256), nullable=True),
        sa.Column("seq_num", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["data_asset_instance_id"],
            ["dataassetinstance.id"],
        ),
        sa.ForeignKeyConstraint(
            ["function_id"],
            ["function.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=CONFIGURATION_SCHEMA,
    )
    # create sequences
    op.execute(CreateSequence(Sequence("client_id_seq", schema=CONFIGURATION_SCHEMA)))
    op.execute(
        CreateSequence(Sequence("dataingest_id_seq", schema=CONFIGURATION_SCHEMA))
    )
    op.execute(
        CreateSequence(Sequence("dataprovider_id_seq", schema=CONFIGURATION_SCHEMA))
    )
    op.execute(CreateSequence(Sequence("domain_id_seq", schema=CONFIGURATION_SCHEMA)))
    op.execute(
        CreateSequence(Sequence("fileformat_id_seq", schema=CONFIGURATION_SCHEMA))
    )
    op.execute(CreateSequence(Sequence("function_id_seq", schema=CONFIGURATION_SCHEMA)))
    op.execute(CreateSequence(Sequence("schema_id_seq", schema=CONFIGURATION_SCHEMA)))
    op.execute(
        CreateSequence(Sequence("sftpsource_id_seq", schema=CONFIGURATION_SCHEMA))
    )
    op.execute(
        CreateSequence(Sequence("dataasset_id_seq", schema=CONFIGURATION_SCHEMA))
    )
    op.execute(
        CreateSequence(Sequence("functionargument_id_seq", schema=CONFIGURATION_SCHEMA))
    )
    op.execute(
        CreateSequence(Sequence("schemacolumn_id_seq", schema=CONFIGURATION_SCHEMA))
    )
    op.execute(
        CreateSequence(
            Sequence("dataassetinstance_id_seq", schema=CONFIGURATION_SCHEMA)
        )
    )
    op.execute(
        CreateSequence(Sequence("functionmapping_id_seq", schema=CONFIGURATION_SCHEMA))
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(DropSequence(Sequence("client_id_seq", schema=CONFIGURATION_SCHEMA)))
    op.execute(DropSequence(Sequence("dataingest_id_seq", schema=CONFIGURATION_SCHEMA)))
    op.execute(
        DropSequence(Sequence("dataprovider_id_seq", schema=CONFIGURATION_SCHEMA))
    )
    op.execute(DropSequence(Sequence("domain_id_seq", schema=CONFIGURATION_SCHEMA)))
    op.execute(DropSequence(Sequence("fileformat_id_seq", schema=CONFIGURATION_SCHEMA)))
    op.execute(DropSequence(Sequence("function_id_seq", schema=CONFIGURATION_SCHEMA)))
    op.execute(DropSequence(Sequence("schema_id_seq", schema=CONFIGURATION_SCHEMA)))
    op.execute(DropSequence(Sequence("sftpsource_id_seq", schema=CONFIGURATION_SCHEMA)))
    op.execute(DropSequence(Sequence("dataasset_id_seq", schema=CONFIGURATION_SCHEMA)))
    op.execute(
        DropSequence(Sequence("functionargument_id_seq", schema=CONFIGURATION_SCHEMA))
    )
    op.execute(
        DropSequence(Sequence("schemacolumn_id_seq", schema=CONFIGURATION_SCHEMA))
    )
    op.execute(
        DropSequence(Sequence("dataassetinstance_id_seq", schema=CONFIGURATION_SCHEMA))
    )
    op.execute(
        DropSequence(Sequence("functionmapping_id_seq", schema=CONFIGURATION_SCHEMA))
    )
    op.drop_table("functionmapping", schema=CONFIGURATION_SCHEMA)
    op.drop_table("dataassetinstance", schema=CONFIGURATION_SCHEMA)
    op.drop_table("schemacolumn", schema=CONFIGURATION_SCHEMA)
    op.drop_table("functionargument", schema=CONFIGURATION_SCHEMA)
    op.drop_table("dataasset", schema=CONFIGURATION_SCHEMA)
    op.drop_table("sftpsource", schema=CONFIGURATION_SCHEMA)
    op.drop_table("schema", schema=CONFIGURATION_SCHEMA)
    op.drop_table("function", schema=CONFIGURATION_SCHEMA)
    op.drop_table("fileformat", schema=CONFIGURATION_SCHEMA)
    op.drop_table("domain", schema=CONFIGURATION_SCHEMA)
    op.drop_table("dataprovider", schema=CONFIGURATION_SCHEMA)
    op.drop_table("dataingest", schema=CONFIGURATION_SCHEMA)
    op.drop_table("client", schema=CONFIGURATION_SCHEMA)
    # ### end Alembic commands ###
