"""empty message

Revision ID: e05e110ef52f
Revises: 22f9da51ea7f
Create Date: 2023-03-13 23:46:20.685048

"""
import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from sqlalchemy import Sequence
from sqlalchemy.sql.ddl import DropSequence, CreateSequence

from app.constants import METADATA_SCHEMA

# revision identifiers, used by Alembic.
revision = "e05e110ef52f"
down_revision = "22f9da51ea7f"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.create_table(
        "pipelinetask",
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=True,
        ),
        sa.Column("deleted_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("data_asset_instance_id", sa.Integer(), nullable=True),
        sa.Column("data_asset_id", sa.Integer(), nullable=True),
        sa.Column("external_id", sa.String(length=256), nullable=True),
        sa.Column("service_name", sa.String(length=256), nullable=False),
        sa.Column(
            "task_type",
            sa.Enum(
                "TRANSFER",
                "DATA_INGEST",
                "TRANSFORM",
                "CREATE_FILE_FORMAT",
                "CREATE_STAGE",
                "CREATE_SNOWPIPE",
                "CREATE_TABLE",
                "ALTER_FILE_FORMAT",
                "ALTER_STAGE",
                "ALTER_SNOWPIPE",
                "ALTER_TABLE",
                name="pipelinetasktype",
            ),
            nullable=False,
        ),
        sa.Column(
            "state",
            sa.Enum(
                "QUEUED",
                "RUNNING",
                "FAILED",
                "CANCELLED",
                "COMPLETED",
                name="pipelinetaskstate",
            ),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "SUCCESS",
                "FAILED",
                "PARTIAL_SUCCESS",
                name="pipelinetaskstatus",
            ),
            nullable=True,
        ),
        sa.Column("extra_info", sqlalchemy_utils.types.json.JSONType(), nullable=True),
        sa.Column(
            "started_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("ended_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["data_asset_id"],
            ["CONFIGURATION.dataasset.id"],
        ),
        sa.ForeignKeyConstraint(
            ["data_asset_instance_id"],
            ["CONFIGURATION.dataassetinstance.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=METADATA_SCHEMA,
    )
    op.execute(CreateSequence(Sequence("pipelinetask_id_seq", schema=METADATA_SCHEMA)))
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("pipelinetask", schema=METADATA_SCHEMA)
    op.execute(DropSequence(Sequence("pipelinetask_id_seq", schema=METADATA_SCHEMA)))
    # ### end Alembic commands ###
